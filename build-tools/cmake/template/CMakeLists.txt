#
# ccmake and cmake
#
# Author Naoki Takahashi
# Email s16c1077hq@s.chibakoudai.jp
#

## Use cmake version ##
cmake_minimum_required(VERSION 3.10)

if("${CMAKE_CURRENT_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_BINARY_DIR}")
	message(FATAL_ERROR "Should chenge directory")
endif()

## Include module path ##
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../../build-tools/cmake/module)
include(BuildTools REQUIRED)

## Project name ##
project(None CXX)
project_name_from_directory(${PROJECT_NAME})

## CXX settings ##
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED true)
set(CMAKE_CXX_EXTENSIONS false)

## CMake build type is Debug or Release, RelWithDebInfo ##
if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Debug)
endif()

## Output and Input directory ##
executable_output_directory(EXECUTABLE_MOTHER_PATH EXECUTABLE_OUTPUT_PATH "${PROJECT_NAME}")
library_output_directory(LIBRARY_MOTHER_PATH LIBRARY_OUTPUT_PATH "${PROJECT_NAME}")

set(INCLUDE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/..)
set(SOURCE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

## Executable name and Library name ##
set(BINARY_TARGET_NAME ${PROJECT_NAME}.out)
set(PROJECT_LIBRARY_NAME ${PROJECT_NAME})

## CXX flag ##
set(CMAKE_CXX_FLAGS "-Winline -Wextra -Wall -pedantic-errors -fPIC" CACHE STRING "CXX standard options" FORCE)
set(CMAKE_CXX_FLAGS_DEBUG "-g3" CACHE STRING "CXX debug optinos" FORCE)
#set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")

## CXX file exts ##
set(CXX_SOURCE_FILE_EXTS cpp)
set(CXX_INCLUDE_FILE_EXTS hpp;h)

## CXX library link ##
set(ALL_LINK_LIBRARIES ${ALL_LINK_LIBRARIES} stdc++ pthread m)

## Find library ##
#UsingPython2(PYTHON2_INCLUDE PYTHON2_LUBRARY)
#UsingRBDL(RBDL_INCLUDE RBDL_LIBRARY)
#UsingQT(QT_INCLUDE QT_LIBRARY)
#UsingSPDLOG(SPDLOG_INCLUDE SPDLOG_LIBRARY)
#UsingGL(GL_INCLUDE GL_LIBRARY)
#UsingSSH(SSH_INCLUDE SSH_LIBRARY)
#UsingODE(ODE_INCLUDE ODE_LIBRARY)
#UsingCV(CV_INCLUDE CV_LIBRARY)
#UsingBoost(Boost_INCLUDE Boost_LIBRARY)
#UsingEigen3(Eigen3_INCLUDE Eigen3_LIBRARY)

## Use Module library path ##
#set(MODULE_LIBRARY_PATHS ${MODULE_LIBRARY_PATHS} ${LIBRARY_MOTHER_PATH}/XXX)

#### Do not edit ####

assert_exist_path(${SOURCE_DIRECTORY})

set(ALL_LINK_LIBRARIES ${ALL_LINK_LIBRARIES} ${PYTHON2_LUBRARY} ${RBDL_LIBRARY} ${QT_LIBRARY} ${SPDLOG_LIBRARY} ${GL_LIBRARY} ${SSH_LIBRARY} ${ODE_LIBRARY} ${CV_LIBRARY} ${Boost_LIBRARY} ${Eigen3_LIBRARY})
set(INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORIES} ${PYTHON2_INCLUDE} ${RBDL_INCLUDE} ${QT_INCLUDE} ${SPDLOG_INCLUDE} ${GL_INCLUDE} ${SSH_INCLUDE} ${ODE_INCLUDE} ${CV_INCLUDE} ${Boost_INCLUDE} ${Eigen3_INCLUDE})

FindFiles(CXX_SOURCE_FILES "${SOURCE_DIRECTORY}" "${CXX_SOURCE_FILE_EXTS}")
FindFiles(CXX_INCLUDE_FILES "${SOURCE_DIRECTORY}" "${CXX_INCLUDE_FILE_EXTS}")

CreateDirectoryPathListFromFile(CXX_INCLUDE_DIRECTORIES "${CXX_INCLUDE_FILES}")

set(SOURCE_FILES ${CXX_SOURCE_FILES})
set(INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORIES} ${INCLUDE_DIRECTORY} ${CXX_INCLUDE_DIRECTORIES})
include_directories(${INCLUDE_DIRECTORIES})

CreateLibrarySourceFromSourceList(LIBRARY_SOURCES "${SOURCE_FILES}" MAIN_FILE main.cpp)

if(LIBRARY_SOURCES)
	LinkModuleLibrary(${PROJECT_LIBRARY_NAME} "${LIBRARY_SOURCES}" "${ALL_LINK_LIBRARIES}" "${MODULE_LIBRARY_PATHS}")
	set(ALL_LINK_LIBRARIES ${ALL_LINK_LIBRARIES} ${PROJECT_LIBRARY_NAME})
endif()

CreateExecutable(${BINARY_TARGET_NAME} "${MAIN_FILE}" ${PROJECT_LIBRARY_NAME} "${ALL_LINK_LIBRARIES}")

#### Do not edit ####

